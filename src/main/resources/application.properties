spring.application.name=transfusion-service
spring.config.import=optional:file:.env[.properties]

# Server Configuration
server.port=8081

# R2DBC Configuration for Neon DB with Connection Pooling
# Using r2dbc:pool: prefix for automatic connection pooling
spring.r2dbc.url=r2dbc:pool:postgresql://${DB_USERNAME}:${DB_PASSWORD}@${DB_HOST:ep-damp-darkness-a8pf07lc-pooler.eastus2.azure.neon.tech}:${DB_PORT:5432}/${DB_NAME:neondb}?sslmode=require

#logging
logging.level.com.vitasync.transfusion_service=DEBUG

# Disable schema initialization for local testing to avoid database issues
spring.sql.init.mode=never

# Note: The URL is slightly different for R2DBC, including the 'r2dbc:pool:...' prefix
# and port 5432 is explicitly added.

# postgresql://neondb_owner:npg_elfEhiZAd41k@ep-damp-darkness-a8pf07lc-pooler.eastus2.azure.neon.tech/neondb?sslmode=require&channel_binding=require


#SpringDocs 
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/v3/api-docs
# springdoc.packages-to-scan=com.vitasync.vitasynctransfusionservice
springdoc.info.title=VitaSync Transfusion & Donation API
springdoc.info.version=v1.0
springdoc.info.description=API for managing blood transfusion requests and donation schedules.
springdoc.packages-to-scan=com.vitasync.transfusion_service

#-------------------------------------------------------------------------
#Kafka - section

# Kafka Producer Configuration
# The address of the Kafka server
spring.kafka.bootstrap-servers=localhost:9092

# Producer configuration for JSON serialization
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

# The topic name we will use, for consistency and easier management
kafka.topic.transfusion-requests=transfusion-requests-topic

#-------------------------------------------------------------------------